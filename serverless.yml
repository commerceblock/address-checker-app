service:
  name: token-sale-whitelist

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-kms-secrets
  - serverless-single-page-app-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  defaultStage: sand
  accounts:
    prod:
      stage: prod021
      domainName: whitelist.commerceblock.com
    sand:
      stage: sand020
      domainName: whitelist.commerceblock.ninja
    test:
      stage: test025
      domainName: whitelist.test.commerceblock.ninja
  selectedStage: ${env:CB_ENV, self:custom.defaultStage}
  stage: ${self:custom.accounts.${self:custom.selectedStage}.stage}
  externalConfig: ${file(env.${self:custom.stage}.${opt:region, self:provider.region}.yml)}
  kmsSecrets: ${file(kms-secrets.${self:custom.stage}.${opt:region, self:provider.region}.yml)}
  cors: ${self:custom.externalConfig.cors}
  dynamodbThroughput: ${self:custom.externalConfig.dynamodbThroughput}
  kinesis: ${self:custom.externalConfig.kinesis}
  s3Bucket: cb-${self:provider.environment.CB_ENV_NAME}-website
  localWebsiteDestination: build/frontend/
  remoteWebsiteDestination: s3://${self:custom.s3Bucket}/
  domainName: ${self:custom.accounts.${self:custom.selectedStage}.domainName}
  # dev env
  dynamodb: ${self:custom.externalConfig.dynamodb}
  serverless-offline: ${self:custom.externalConfig.serverless-offline}


provider:
  name: aws
  stage: ${self:custom.stage}
  region: eu-west-1
  runtime: nodejs6.10
  memorySize: 256
  timeout: 5
  versionFunctions: true
  environment:
    CB_ENV_NAME: ${self:custom.stage}-${self:service}
    CB_COINFIRM_API: ${self:custom.externalConfig.coinfirm.api}
    CB_DISABLED_COINFIRM_API: ${self:custom.externalConfig.coinfirm.disabled}
    # secrets
    CB_ENC_COINFIRM_API_TOKEN: ${self:custom.kmsSecrets.secrets.CB_ENC_COINFIRM_API_TOKEN}
    CB_ENC_STORAGE_ACCESS_KEY: ${self:custom.kmsSecrets.secrets.CB_ENC_STORAGE_ACCESS_KEY}
    CB_ENC_STORAGE_SECRET_KEY: ${self:custom.kmsSecrets.secrets.CB_ENC_STORAGE_SECRET_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - kinesis:PutRecords
      Resource: "arn:aws:kinesis:${self:provider.region}:*:stream/${self:custom.stage}-${self:service}-*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-${self:service}-*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}

functions:

  graphql-api:
    name: ${self:provider.environment.CB_ENV_NAME}-graphql-api
    handler: lambda/graphql-api.post
    events:
    - http:
        path: /v1.0/graphql
        method: post
        cors: true

  ### Backoffice functions
  backoffice-kinesis-processor:
    name: ${self:provider.environment.CB_ENV_NAME}-backoffice-kinesis-processor
    handler: lambda/backoffice-kinesis-processor.process
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - EventsDynamoDbTable
              - StreamArn

  backoffice-coinfirm-processor:
    name: ${self:provider.environment.CB_ENV_NAME}-backoffice-coinfirm-processor
    handler: lambda/backoffice-coinfirm-processor.process
    timeout: 30
    events:
      - stream:
          type: kinesis
          batchSize: 100
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt:
              - KinesisStream
              - Arn

resources:
  Resources:
    WebsiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebsiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: WebsiteS3Bucket
                  - "/*"
    EventsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CB_ENV_NAME}-events
        AttributeDefinitions:
          -
            AttributeName: address
            AttributeType: S
          -
            AttributeName: event_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: address
            KeyType: HASH
          -
            AttributeName: event_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodbThroughput.events.read}
          WriteCapacityUnits: ${self:custom.dynamodbThroughput.events.write}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:provider.environment.CB_ENV_NAME}-events
        ShardCount: ${self:custom.kinesis.shardCount}
        RetentionPeriodHours:  ${self:custom.kinesis.retentionPeriodHours}
    StorageBucket:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.CB_ENV_NAME}-storage
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, POST, PUT]
            AllowedOrigins: ["*"]
            ExposedHeaders: [Date]
            Id: FirstRule
            MaxAge: "3600"
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3-website-${self:provider.region}.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.kmsSecrets.certificateArn}
            SslSupportMethod: sni-only

  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
